{"name": "test_Login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\n  (Session info: chrome=103.0.5060.66)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x0105D953+2414931]\n\tOrdinal0 [0x00FEF5E1+1963489]\n\tOrdinal0 [0x00EDC6B8+837304]\n\tOrdinal0 [0x00ED8E18+822808]\n\tOrdinal0 [0x00ECDE5D+777821]\n\tOrdinal0 [0x00ECEA3B+780859]\n\tOrdinal0 [0x00ECE06A+778346]\n\tOrdinal0 [0x00ECD646+775750]\n\tOrdinal0 [0x00ECC565+771429]\n\tOrdinal0 [0x00ECCA3D+772669]\n\tOrdinal0 [0x00EDDEA4+843428]\n\tOrdinal0 [0x00F34EBD+1199805]\n\tOrdinal0 [0x00F2449C+1131676]\n\tOrdinal0 [0x00F34812+1198098]\n\tOrdinal0 [0x00F242B6+1131190]\n\tOrdinal0 [0x00EFE860+976992]\n\tOrdinal0 [0x00EFF756+980822]\n\tGetHandleVerifier [0x012CCC62+2510274]\n\tGetHandleVerifier [0x012BF760+2455744]\n\tGetHandleVerifier [0x010EEABA+551962]\n\tGetHandleVerifier [0x010ED916+547446]\n\tOrdinal0 [0x00FF5F3B+1990459]\n\tOrdinal0 [0x00FFA898+2009240]\n\tOrdinal0 [0x00FFA985+2009477]\n\tOrdinal0 [0x01003AD1+2046673]\n\tBaseThreadInitThunk [0x760C6739+25]\n\tRtlGetFullPathName_UEx [0x77468FEF+1215]\n\tRtlGetFullPathName_UEx [0x77468FBD+1165]", "trace": "self = <test_orangehrm.TestHRM object at 0x0000021BCFB1C400>\n\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_Login(self):\n        self.s = Service(\"C:\\chromedriver\")\n        self.driver = webdriver.Chrome(service = self.s)\n>       self.driver.get(\"https://opensource-demo.orangehrmlive\")\n\nAllure-Report\\test_orangehrm.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\python calculator\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:437: in get\n    self.execute(Command.GET, {'url': url})\n..\\python calculator\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:425: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021BCFB1F070>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_NAME_NOT_RESOLVED\\\\n  (...unk [0x760C6739+25]\\\\n\\\\tRtlGetFullPathName_UEx [0x77468FEF+1215]\\\\n\\\\tRtlGetFullPathName_UEx [0x77468FBD+1165]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\nE         (Session info: chrome=103.0.5060.66)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x0105D953+2414931]\nE       \tOrdinal0 [0x00FEF5E1+1963489]\nE       \tOrdinal0 [0x00EDC6B8+837304]\nE       \tOrdinal0 [0x00ED8E18+822808]\nE       \tOrdinal0 [0x00ECDE5D+777821]\nE       \tOrdinal0 [0x00ECEA3B+780859]\nE       \tOrdinal0 [0x00ECE06A+778346]\nE       \tOrdinal0 [0x00ECD646+775750]\nE       \tOrdinal0 [0x00ECC565+771429]\nE       \tOrdinal0 [0x00ECCA3D+772669]\nE       \tOrdinal0 [0x00EDDEA4+843428]\nE       \tOrdinal0 [0x00F34EBD+1199805]\nE       \tOrdinal0 [0x00F2449C+1131676]\nE       \tOrdinal0 [0x00F34812+1198098]\nE       \tOrdinal0 [0x00F242B6+1131190]\nE       \tOrdinal0 [0x00EFE860+976992]\nE       \tOrdinal0 [0x00EFF756+980822]\nE       \tGetHandleVerifier [0x012CCC62+2510274]\nE       \tGetHandleVerifier [0x012BF760+2455744]\nE       \tGetHandleVerifier [0x010EEABA+551962]\nE       \tGetHandleVerifier [0x010ED916+547446]\nE       \tOrdinal0 [0x00FF5F3B+1990459]\nE       \tOrdinal0 [0x00FFA898+2009240]\nE       \tOrdinal0 [0x00FFA985+2009477]\nE       \tOrdinal0 [0x01003AD1+2046673]\nE       \tBaseThreadInitThunk [0x760C6739+25]\nE       \tRtlGetFullPathName_UEx [0x77468FEF+1215]\nE       \tRtlGetFullPathName_UEx [0x77468FBD+1165]\n\n..\\python calculator\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: WebDriverException"}, "start": 1656652692148, "stop": 1656652694929, "uuid": "ba4dcdca-db69-4efa-8039-1b8c5fcc8605", "historyId": "01f30eab533deb036a05d56c4c73dbd5", "testCaseId": "81c3181b58d15220d81f2e2f65491eb7", "fullName": "Allure-Report.test_orangehrm.TestHRM#test_Login", "labels": [{"name": "severity", "value": "critical"}, {"name": "parentSuite", "value": "Allure-Report"}, {"name": "suite", "value": "test_orangehrm"}, {"name": "subSuite", "value": "TestHRM"}, {"name": "host", "value": "LAPTOP-08HBEJH0"}, {"name": "thread", "value": "21208-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Allure-Report.test_orangehrm"}]}